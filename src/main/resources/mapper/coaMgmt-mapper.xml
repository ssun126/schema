<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="coaMgmt">

    <select id="getCOANumber" resultType="String">
        /* coaMgmtMapper.getCOANumber */
        SELECT 'COA-'|| TO_CHAR(SYSDATE, 'YYMMDD') || LPAD(SEQ_COA_ID_01.NEXTVAL, 8, '0')
        FROM DUAL
    </select>

    <select id="GetBaseCode"  parameterType="String" resultType="baseCode">
        SELECT * FROM  SC_base_code
        WHERE  GROUP_CODE != BASE_CODE
        AND BASE_STATUS ='Y'
        AND GROUP_CODE  =#{GROUP_CODE}
        ORDER BY BASE_SORT ASC
    </select>

    <select id="GetBaseCodePLANT"  parameterType="String" resultType="baseCode">
        SELECT * FROM  SC_base_code
        WHERE  GROUP_CODE != BASE_CODE
        AND BASE_STATUS ='Y'
        AND GROUP_CODE  =#{GROUP_CODE}
        AND BASE_OPTION2 IS NOT null
        ORDER BY BASE_SORT ASC
    </select>

    <select id="getUserList"  parameterType="map" resultType="hashMap">
        SELECT
        u.USER_IDX,
        u.USER_ID,
        u.USER_PWD,
        u.USER_NAME,
        u.USER_GUBN,
        u.USER_STATUS,
        u.REG_DW_USER_IDX,
        u.UP_DW_USER_IDX,
        u.DEL_DW_USER_IDX,
        TO_CHAR(u.REG_DATE, 'YYYY-MM-DD') REG_DATE ,
        u.UP_DATE,
        u.DEL_DATE
        FROM SC_USER_INFO u
        WHERE 1=1
        AND  u.USER_STATUS = 'Y'
        <if test="USER_ID != null and USER_ID != ''">
            AND u.USER_ID LIKE '%' || #{USER_ID} || '%'
        </if>
        <if test="USER_NAME != null and USER_NAME != ''">
            AND u.USER_NAME LIKE '%' || #{USER_NAME} || '%'
        </if>
    </select>

    <!--성적서 그리드-->
    <select id="getCOAList"  parameterType="coaMgmt" resultType="coaMgmt">
        SELECT
        CM.COA_ID
        , CM.VENDOR_ID
        , MT.VENDOR_NAME
        , CM.MATERIAL_ID
        , MT.MATERIAL_NAME
        , CM.FACTORY_ID
        , SML.LANGUAGE_CODE_DATA AS FACTORY_NAME
        , CM.LOT_NO
        , CM.STOCK_DATE
        , CM.MF_DATE
        , CM.COA_STATUS
        , CM.ETC
        , CM.IF_SEND_DATETIME
        , CM.RETURN_DESC
        , CM.IF_USER
        , TO_CHAR(CM.IF_DATETIME, 'YYYY-MM-DD') AS IF_DATETIME
        , CM.CREATOR
        , CM.CREATE_DATETIME
        , (SELECT MIN(CD.IS_SPECIN)
              FROM COA_DETAIL CD
            WHERE CD.COA_ID = CM.COA_ID
                AND CD.LOT_NO = CM.LOT_NO) AS SPEC_IN
        , (SELECT SM.LANGUAGE_CODE_DATA
              FROM CODE_DETAIL CD
            JOIN SYS_MULTI_LANGUAGE SM
             ON CD.MULTI_LANG_ID = SM.LANGUAGE_CODE_ID
                AND SM.LANGUAGE = #{TOKEN_USER_LANG}
        WHERE MASTER_ID = 'COA_STATUS'
        AND CD.CODE_VALUE = CM.COA_STATUS) AS COA_STATUS_STR
        , SU.USER_NAME AS CREATOR_NAME
        , CM.VENDOR_COMMENT
        , MT.WETPR
        , CM.E_DATE
        , CM.QUANTITY
        FROM COA_MASTER CM
        JOIN MATERIAL MT
          ON CM.VENDOR_ID = MT.VENDOR_ID
            AND CM.MATERIAL_ID = MT.MATERIAL_ID
            AND CM.FACTORY_ID = MT.FACTORY_ID
<!--        JOIN SYS_USER SU-->
<!--         ON SU.USER_ID = CM.CREATOR-->
                JOIN SC_USER_INFO SU
                 ON SU.USER_ID = CM.CREATOR
        JOIN(SELECT PLANT.ID,
                SYS_MULTI_LANGUAGE.LANGUAGE_CODE_DATA
            FROM PLANT, SYS_MULTI_LANGUAGE
            WHERE
                 PLANT.MULTI_LANG_ID = SYS_MULTI_LANGUAGE.LANGUAGE_CODE_ID
                  AND SYS_MULTI_LANGUAGE.LANGUAGE = #{TOKEN_USER_LANG}) SML
        ON CM.FACTORY_ID = SML.ID
        WHERE
        <if test="TOKEN_USER_TYPE == null or TOKEN_USER_TYPE == ''">
            1 = 0
        </if>

        <if test="TOKEN_USER_TYPE != null">
            <if test="TOKEN_USER_TYPE != 'AU' and TOKEN_USER_TYPE != 'MU' and TOKEN_USER_TYPE != 'VU'">
                1 = 0
            </if>
            <if test="TOKEN_USER_TYPE == 'AU' or TOKEN_USER_TYPE == 'MU' or TOKEN_USER_TYPE == 'VU'">
                1 = 1
            </if>
        </if>

        <if test="fromDate != null and fromDate != ''">
            AND CM.CREATE_DATETIME <![CDATA[ >= ]]> #{fromDate} || ' 00:00:00.000'
        </if>

        <if test="toDate != null and toDate != ''">
            AND CM.CREATE_DATETIME <![CDATA[ <= ]]> #{toDate} || ' 23:59:59.999'
        </if>

        <if test="registerName != null and registerName != ''">
            AND UPPER(SU.USER_NAME) LIKE '%' || UPPER(#{registerName}) || '%'
        </if>

<!--        <if test="vendorNameList != null">-->
<!--            AND MT.VENDOR_NAME IN-->
<!--            <foreach collection="vendorNameList" item="item" index="index" separator="," open="(" close=")">-->
<!--                #{item}-->
<!--            </foreach>-->
<!--        </if>-->

        <if test="vendorNameList == null">
            <if test="vendorName != null and vendorName != ''">
                AND UPPER(MT.VENDOR_NAME) LIKE '%' || UPPER(#{vendorName}) || '%'
            </if>
        </if>

        <if test="coaNumber != null and coaNumber != ''">
            AND CM.COA_ID LIKE '%' || #{coaNumber} || '%'
        </if>

        <if test="materialName != null and materialName != ''">
            AND UPPER(MT.MATERIAL_NAME) LIKE '%' || UPPER(#{materialName}) || '%'
        </if>

        <!-- 성적서 상태-->
        <if test="coaStatus != null and coaStatus != ''">
            AND CM.COA_STATUS = #{coaStatus}
        </if>

        <if test="lotNo != null and lotNo != ''">
            AND CM.LOT_NO LIKE '%' || #{lotNo} || '%'
        </if>

        <!-- 플랜트-->
        <if test="factoryId != null and factoryId != ''">
            AND CM.FACTORY_ID = #{factoryId}
        </if>

        <if test="dlvFromDate != null and dlvFromDate != ''">
            AND CM.STOCK_DATE <![CDATA[ >= ]]> #{dlvFromDate}
        </if>

        <if test="dlvToDate != null and dlvToDate != ''">
            AND CM.STOCK_DATE <![CDATA[ <= ]]> #{dlvToDate}
        </if>

        <if test="TOKEN_USER_TYPE != null and TOKEN_USER_TYPE == 'MU'">
            AND MT.FACTORY_ID IN (SELECT PLANT_ID FROM USER_PLANT WHERE USER_ID = #{TOKEN_USER_ID})
        </if>

        <if test="TOKEN_USER_TYPE != null and TOKEN_USER_TYPE == 'VU'">
            AND MT.VENDOR_ID IN (SELECT VENDOR_ID FROM USER_VENDOR WHERE USER_ID = #{TOKEN_USER_ID})
        </if>

        ORDER BY COA_ID DESC
    </select>

    <!--  팝업 성적서 상단 -->
    <select id="getCOADetailTitle" parameterType="coaMgmt" resultType="coaMgmt">
        /* coaMgmtMapper.getCOADetailTitle */
        SELECT
            CM.COA_ID
            , CM.VENDOR_ID
            , MT.VENDOR_NAME
            , CM.MATERIAL_ID
            , MT.MATERIAL_NAME
            , CM.FACTORY_ID
            , MT.FACTORY_NAME
            , CM.LOT_NO
            , CM.STOCK_DATE
            , CM.MF_DATE
            , CM.COA_STATUS
            , CM.ETC
            , CM.IF_SEND_DATETIME
            , CM.RETURN_DESC
            , CM.CREATOR
            , CM.CREATE_DATETIME
            , CM.VENDOR_COMMENT
            , CM.E_DATE
            , CM.QUANTITY
        FROM COA_MASTER CM
            JOIN MATERIAL MT
                ON CM.VENDOR_ID = MT.VENDOR_ID
            AND CM.MATERIAL_ID = MT.MATERIAL_ID
            AND CM.FACTORY_ID = MT.FACTORY_ID
        WHERE CM.COA_ID = #{COA_ID}
            AND CM.VENDOR_ID = #{VENDOR_ID}
            AND CM.MATERIAL_ID = #{MATERIAL_ID}
            AND CM.FACTORY_ID = #{FACTORY_ID}
            AND CM.LOT_NO = #{LOT_NO}
    </select>

    <!--성적서 팝업 그리드(스팩)-->
    <select id="getCOADetailSpec" parameterType="coaMgmt" resultType="coaMgmt">
        /* coaMgmtMapper.getCOADetailSpec */
        SELECT
        CD.COA_ID
        , CD.LOT_NO
        , CD.SPEC_ID
        , SP.SPEC_NAME
        , SP.SPEC_ENG_NAME
        , CD.SPEC_LSL
        , CD.SPEC_USL
        , NVL(CD.RESULT_VALUE, ' ') AS RESULT_VALUE
        , CD.IS_SPECIN
        , CD.IF_SEND_DATETIME
        <![CDATA[
		     , NVL2(CD.SPEC_LSL
		            , NVL2(CD.SPEC_USL
		                   , DECODE(SUBSTR(CD.SPEC_LSL, 1, 1), '.', '0'||CD.SPEC_LSL, CD.SPEC_LSL) || ' ~ ' || DECODE(SUBSTR(CD.SPEC_USL, 1, 1), '.', '0'||CD.SPEC_USL, CD.SPEC_USL)
		                   , '>= ' || DECODE(SUBSTR(CD.SPEC_LSL, 1, 1), '.', '0'||CD.SPEC_LSL, CD.SPEC_LSL))
		            , NVL2(CD.SPEC_USL
		                   , '<= ' || DECODE(SUBSTR(CD.SPEC_USL, 1, 1), '.', '0'||CD.SPEC_USL, CD.SPEC_USL)
		                   , 'No Spec')) AS SPEC_AREA
		     ]]>
        <![CDATA[
		     , NVL2(CD.SPEC_LCL
		            , NVL2(CD.SPEC_UCL
		                   , DECODE(SUBSTR(CD.SPEC_LCL, 1, 1), '.', '0'||CD.SPEC_LCL, CD.SPEC_LCL) || ' ~ ' || DECODE(SUBSTR(CD.SPEC_UCL, 1, 1), '.', '0'||CD.SPEC_UCL, CD.SPEC_UCL)
		                   , '>= ' || DECODE(SUBSTR(CD.SPEC_LCL, 1, 1), '.', '0'||CD.SPEC_LCL, CD.SPEC_LCL))
		            , NVL2(CD.SPEC_UCL
		                   , '<= ' || DECODE(SUBSTR(CD.SPEC_UCL, 1, 1), '.', '0'||CD.SPEC_UCL, CD.SPEC_UCL)
		                   , 'No Spec')) AS SPEC_AREA2
		     ]]>
        <![CDATA[
             , CASE WHEN CD.SPEC_LSL IS NULL AND CD.SPEC_USL IS NULL THEN 'N'
                    WHEN CD.SPEC_LSL IS NULL AND TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    WHEN CD.SPEC_USL IS NULL AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    WHEN TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    ELSE 'Y'
               END AS IS_SPEC_YN
             ]]>
        <![CDATA[
             , CASE WHEN CD.SPEC_LCL IS NULL AND CD.SPEC_UCL IS NULL THEN 'N'
                    WHEN CD.SPEC_LCL IS NULL AND TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    WHEN CD.SPEC_UCL IS NULL AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    WHEN TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
                    ELSE 'Y'
               END AS IS_CONTROL_YN
            ]]>
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{COA_ID}
        AND CD.LOT_NO = #{LOT_NO}
        AND SP.VENDOR_ID = #{VENDOR_ID}
        AND SP.MATERIAL_ID = #{MATERIAL_ID}
        AND SP.FACTORY_ID = #{FACTORY_ID}
        ORDER BY
        SP.ORDER_NO
    </select>

    <update id="updateVendorComment">
        /* coaMgmtMapper.updateVendorComment */
        UPDATE COA_MASTER
        SET VENDOR_COMMENT = #{VENDOR_COMMENT}
        , MODIFIER = #{TOKEN_USER_ID}
        , MODIFY_TIME = SYSDATE
        WHERE COA_ID = #{COA_ID}
        AND LOT_NO = #{LOT_NO}
    </update>

    <update id="copyCOAMaster" parameterType="coaMgmt">

        INSERT INTO COA_MASTER (
            COA_ID,
            VENDOR_ID,
            MATERIAL_ID,
            FACTORY_ID,
            LOT_NO,
            STOCK_DATE,
            MF_DATE,
            COA_STATUS,
            E_DATE,
            QUANTITY,
            LANGUAGE_TYPE,
            CREATOR,
            CREATE_DATETIME
        )
        SELECT
                #{COPY_COA_ID},
                VENDOR_ID,
                MATERIAL_ID,
                FACTORY_ID,
                LOT_NO,
                #{STOCK_DATE},
                #{MF_DATE},
                'A',
                #{E_DATE},
                #{QUANTITY},
                LANGUAGE_TYPE,
                #{CREATOR},
                SYSDATE
            FROM COA_MASTER
        WHERE  COA_ID = #{COA_ID}
            AND LOT_NO = #{LOT_NO}
            AND VENDOR_ID = #{VENDOR_ID}
            AND MATERIAL_ID = #{MATERIAL_ID}
            AND FACTORY_ID = #{FACTORY_ID}

    </update>


    <update id="copyCOADetail" parameterType="coaMgmt">
        /* coaMgmtMapper.insertCOADetail */
        INSERT INTO COA_DETAIL (
            COA_ID
            , LOT_NO
            , SPEC_ID
            , SPEC_LSL
            , SPEC_USL
            , RESULT_VALUE
            , IS_SPECIN
            , SPEC_LCL
            , SPEC_UCL
        )
        SELECT
                #{COPY_COA_ID}
                , LOT_NO
                , SPEC_ID
                , SPEC_LSL
                , SPEC_USL
                , RESULT_VALUE
                , IS_SPECIN
                , SPEC_LCL
                , SPEC_UCL
            FROM COA_DETAIL
            WHERE
                COA_ID = #{COA_ID}
                AND LOT_NO = #{LOT_NO}

    </update>


    <delete id="delCOAMaster" parameterType="coaMgmt">
        /* coaMgmtMapper.delCOAData */
        DELETE
        FROM COA_MASTER
        WHERE COA_ID = #{COA_ID}
        AND VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
        AND LOT_NO = #{LOT_NO}
    </delete>

    <delete id="delCOADetail" parameterType="coaMgmt">
        /* coaMgmtMapper.delCOADetail */
        DELETE
        FROM COA_DETAIL
        WHERE COA_ID = #{COA_ID}
        AND LOT_NO = #{LOT_NO}
    </delete>


    <select id="regCheck" parameterType="coaMgmt"  resultType="coaMgmt">
        SELECT
            TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 AS THREEDD,(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 AS THREED,
            TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 AS FIVEDD,(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 AS THREED
            , A.E_DATE, A.MF_DATE,
            CASE WHEN TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 <![CDATA[<]]> TO_DATE(A.STOCK_DATE) THEN 'Y' ELSE 'N' END AS IS30LIMIT,
            CASE WHEN TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 <![CDATA[<]]> TO_DATE(A.STOCK_DATE) THEN 'Y' ELSE 'N' END AS IS50LIMIT,
            CASE WHEN B.WETPR = 'PR' THEN 'Y' ELSE 'N' END AS ISPR,
            CASE WHEN A.FACTORY_ID = '1200' AND B.WETPR = 'WET' THEN 'Y' ELSE 'N' END AS FACTORY_SPEC_YN,
            A.FACTORY_ID
        FROM COA_MASTER A, MATERIAL B
        WHERE
            A.COA_ID = #{COA_ID}
            AND A.VENDOR_ID = #{VENDOR_ID}
            AND A.MATERIAL_ID = #{MATERIAL_ID}
            AND A.FACTORY_ID = #{FACTORY_ID}
            AND A.LOT_NO = #{LOT_NO}
            AND A.STOCK_DATE = #{STOCK_DATE}
            AND A.VENDOR_ID = B.VENDOR_ID(+)
            AND A.FACTORY_ID = B.FACTORY_ID(+)
            AND A.MATERIAL_ID = B.MATERIAL_ID(+)
    </select>

    <select id="regCheckMap" resultType="java.util.LinkedHashMap">
        SELECT
        TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 AS THREEDD,(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 AS THREED,
        TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 AS FIVEDD,(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 AS THREED
        , A.E_DATE, A.MF_DATE,
        CASE WHEN TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.3 <![CDATA[<]]> TO_DATE(A.STOCK_DATE) THEN 'Y' ELSE 'N' END AS IS30LIMIT,
        CASE WHEN TO_DATE(A.E_DATE)-(TO_DATE(A.E_DATE) -TO_DATE(A.MF_DATE))*0.5 <![CDATA[<]]> TO_DATE(A.STOCK_DATE) THEN 'Y' ELSE 'N' END AS IS50LIMIT,
        CASE WHEN B.WETPR = 'PR' THEN 'Y' ELSE 'N' END AS ISPR,
        CASE WHEN A.FACTORY_ID = '1200' AND B.WETPR = 'WET' THEN 'Y' ELSE 'N' END AS FACTORY_SPEC_YN,
        A.FACTORY_ID
        FROM COA_MASTER A, MATERIAL B
        WHERE
        A.COA_ID = #{L_COAId}
        AND A.VENDOR_ID = #{L_VendorId}
        AND A.MATERIAL_ID = #{L_MaterialId}
        AND A.FACTORY_ID = #{L_FactoryId}
        AND A.LOT_NO = #{L_LotNo}
        AND A.STOCK_DATE = #{L_StockDate}
        AND A.VENDOR_ID = B.VENDOR_ID(+)
        AND A.FACTORY_ID = B.FACTORY_ID(+)
        AND A.MATERIAL_ID = B.MATERIAL_ID(+)
    </select>


    <select id="regSpecCheck" parameterType="coaMgmt"  resultType="coaMgmt">
        SELECT(
        SELECT
        COUNT(*)
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LSL IS NULL AND CD.SPEC_USL IS NULL THEN 'N'
							WHEN CD.SPEC_LSL IS NULL AND TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_USL IS NULL AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_SPEC_YN
					]]>
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{COA_ID}
        AND CD.LOT_NO = #{LOT_NO}
        AND SP.VENDOR_ID = #{VENDOR_ID}
        AND SP.MATERIAL_ID = #{MATERIAL_ID}
        AND SP.FACTORY_ID = #{FACTORY_ID}
        )
        WHERE IS_SPEC_YN = 'Y'
        ) IS_SPEC_YN_CNT,
        (
        SELECT
        LISTAGG(SPEC_NAME, ', ')
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LSL IS NULL AND CD.SPEC_USL IS NULL THEN 'N'
							WHEN CD.SPEC_LSL IS NULL AND TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_USL IS NULL AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_SPEC_YN
					]]>
        , SP.SPEC_NAME
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{COA_ID}
        AND CD.LOT_NO = #{LOT_NO}
        AND SP.VENDOR_ID = #{VENDOR_ID}
        AND SP.MATERIAL_ID = #{MATERIAL_ID}
        AND SP.FACTORY_ID = #{FACTORY_ID}
        )
        WHERE IS_SPEC_YN = 'Y'
        ) SPEC_OUT_NAMES,
        (
        SELECT
        COUNT(*)
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LCL IS NULL AND CD.SPEC_UCL IS NULL THEN 'N'
							WHEN CD.SPEC_LCL IS NULL AND TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_UCL IS NULL AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_CONTROL_YN
		            ]]>
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{COA_ID}
        AND CD.LOT_NO = #{LOT_NO}
        AND SP.VENDOR_ID = #{VENDOR_ID}
        AND SP.MATERIAL_ID = #{MATERIAL_ID}
        AND SP.FACTORY_ID = #{FACTORY_ID}
        )
        WHERE IS_CONTROL_YN = 'Y'
        ) IS_CONTROL_YN_CNT
        FROM DUAL
    </select>

    <select id="regSpecCheckMap" resultType="java.util.LinkedHashMap">
        SELECT(
        SELECT
        COUNT(*)
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LSL IS NULL AND CD.SPEC_USL IS NULL THEN 'N'
							WHEN CD.SPEC_LSL IS NULL AND TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_USL IS NULL AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_SPEC_YN
					]]>
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{L_COAId}
        AND CD.LOT_NO = #{L_LotNo}
        AND SP.VENDOR_ID = #{L_VendorId}
        AND SP.MATERIAL_ID = #{L_MaterialId}
        AND SP.FACTORY_ID = #{L_FactoryId}
        )
        WHERE IS_SPEC_YN = 'Y'
        ) IS_SPEC_YN_CNT,
        (
        SELECT
        LISTAGG(SPEC_NAME, ', ')
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LSL IS NULL AND CD.SPEC_USL IS NULL THEN 'N'
							WHEN CD.SPEC_LSL IS NULL AND TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_USL IS NULL AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_USL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LSL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_SPEC_YN
					]]>
        , SP.SPEC_NAME
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{L_COAId}
        AND CD.LOT_NO = #{L_LotNo}
        AND SP.VENDOR_ID = #{L_VendorId}
        AND SP.MATERIAL_ID = #{L_MaterialId}
        AND SP.FACTORY_ID = #{L_FactoryId}
        )
        WHERE IS_SPEC_YN = 'Y'
        ) SPEC_OUT_NAMES,
        (
        SELECT
        COUNT(*)
        FROM(
        SELECT
        <![CDATA[
						CASE WHEN CD.SPEC_LCL IS NULL AND CD.SPEC_UCL IS NULL THEN 'N'
							WHEN CD.SPEC_LCL IS NULL AND TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN CD.SPEC_UCL IS NULL AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    WHEN TO_NUMBER(CD.SPEC_UCL) >= TO_NUMBER(CD.RESULT_VALUE) AND TO_NUMBER(CD.SPEC_LCL) <= TO_NUMBER(CD.RESULT_VALUE) THEN 'N'
		                    ELSE 'Y'
						END AS IS_CONTROL_YN
		            ]]>
        FROM COA_DETAIL CD
        JOIN SPEC SP
        ON SP.SPEC_ID = CD.SPEC_ID
        WHERE CD.COA_ID = #{L_COAId}
        AND CD.LOT_NO = #{L_LotNo}
        AND SP.VENDOR_ID = #{L_VendorId}
        AND SP.MATERIAL_ID = #{L_MaterialId}
        AND SP.FACTORY_ID = #{L_FactoryId}
        )
        WHERE IS_CONTROL_YN = 'Y'
        ) IS_CONTROL_YN_CNT
        FROM DUAL
    </select>


    <select id="getStatusCOAMasterByPK" parameterType="coaMgmt" resultType="String">
        SELECT
        COA_STATUS
<!--        FROM SQM.COA_MASTER-->
        FROM COA_MASTER
        WHERE
        COA_ID =#{COA_ID}
        AND VENDOR_ID =#{VENDOR_ID}
        AND MATERIAL_ID =#{MATERIAL_ID}
        AND FACTORY_ID =#{FACTORY_ID}
        AND LOT_NO =#{LOT_NO}
        AND STOCK_DATE =#{STOCK_DATE}
    </select>

    <select id="getMaterial" parameterType="coaMgmt"  resultType="coaMgmt">
        /* coaMgmtMapper.getMaterial */
        SELECT
        FACTORY_ID
        , FACTORY_NAME
        , VENDOR_ID
        , VENDOR_NAME
        , MATERIAL_ID
        , MATERIAL_NAME
        , NVL(TN_FLAG, 'N') AS TN_FLAG
        , IF_TARGET
        , IF_DATETIME
        FROM MATERIAL
        WHERE VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
    </select>


    <select id="getMaterialMap" resultType="java.util.LinkedHashMap">
        /* coaMgmtMapper.getMaterialMap */
        SELECT
        FACTORY_ID
        , FACTORY_NAME
        , VENDOR_ID
        , VENDOR_NAME
        , MATERIAL_ID
        , MATERIAL_NAME
        , NVL(TN_FLAG, 'N') AS TN_FLAG
        , IF_TARGET
        , IF_DATETIME
        FROM MATERIAL
        WHERE VENDOR_ID = #{L_VendorId}
        AND MATERIAL_ID = #{L_MaterialId}
        AND FACTORY_ID = #{L_FactoryId}
    </select>


    <select id="getExistCount" resultType="Int">
        /* coaMgmtMapper.getExistCount */
        SELECT
        COUNT(*)
        FROM COA_MASTER
        WHERE VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
        AND LOT_NO = #{LOT_NO}
        AND STOCK_DATE = #{STOCK_DATE}
    </select>

    <insert id="insertCOAMaster">
        /* coaMgmtMapper.insertCOAMaster */
        INSERT
        INTO COA_MASTER (
        COA_ID
        , VENDOR_ID
        , MATERIAL_ID
        , FACTORY_ID
        , LOT_NO
        , STOCK_DATE
        , MF_DATE
        , COA_STATUS
        , E_DATE
        , QUANTITY
        , LANGUAGE_TYPE
        <if test="ETC != null and ETC != ''">
            , ETC
        </if>
        , CREATOR
        , CREATE_DATETIME
        )
        VALUES (
        #{COA_ID}
        , #{VENDOR_ID}
        , #{MATERIAL_ID}
        , #{FACTORY_ID}
        , #{LOT_NO}
        , #{STOCK_DATE}
        , #{MF_DATE}
        , #{COA_STATUS}
        , #{E_DATE}
        , #{QUANTITY}
        , #{LANGUAGE_TYPE}
        <if test="ETC != null and ETC != ''">
            , #{ETC}
        </if>
        , #{CREATOR}
        , SYSDATE
        )
    </insert>

    <insert id="insertCOADetail">
        /* coaMgmtMapper.insertCOADetail */
        INSERT
        INTO COA_DETAIL (
        COA_ID
        , LOT_NO
        , SPEC_ID
        , SPEC_LSL
        , SPEC_USL
        , RESULT_VALUE
        , IS_SPECIN
        , SPEC_LCL
        , SPEC_UCL
        )
        VALUES (
        #{COA_ID}
        , #{LOT_NO}
        , #{SPEC_ID}

        <if test="SPEC_LSL == null or SPEC_LSL == ''">
            , null /* SPEC_LSL */
        </if>
        <if test="SPEC_LSL != null and SPEC_LSL != ''">
            , #{SPEC_LSL}
        </if>

        <if test="SPEC_USL == null or SPEC_USL == ''">
            , null /* SPEC_USL */
        </if>
        <if test="SPEC_USL != null and SPEC_USL != ''">
            , #{SPEC_USL}
        </if>

        <if test="RESULT_VALUE == null or RESULT_VALUE == ''">
            , null /* RESULT_VALUE */
        </if>
        <if test="RESULT_VALUE != null and RESULT_VALUE != ''">
            , #{RESULT_VALUE}
        </if>
        , #{IS_SPECIN}

        <if test="SPEC_LCL == null or SPEC_LCL == ''">
            , null /* SPEC_LCL */
        </if>
        <if test="SPEC_LCL != null and SPEC_LCL != ''">
            , #{SPEC_LCL}
        </if>

        <if test="SPEC_UCL == null or SPEC_UCL == ''">
            , null /* SPEC_UCL */
        </if>
        <if test="SPEC_UCL != null and SPEC_UCL != ''">
            , #{SPEC_UCL}
        </if>
        )
    </insert>




    <select id="interfaceLimsCOAMasterData"  parameterType="coaMgmt"  resultType="coaMgmt">
        SELECT
        COA_ID
        , FACTORY_ID
        , VENDOR_ID
        , MATERIAL_ID
        , LOT_NO
        , STOCK_DATE
        , MF_DATE
        , 'B' AS COA_STATUS
        , ETC
        , CREATE_DATETIME
        , CREATOR
        , 'Y' AS UPLOAD_RESULT
        , 'N' AS UPDATE_YN
        , VENDOR_COMMENT
        , E_DATE
        , QUANTITY
        FROM COA_MASTER
        WHERE COA_ID = #{COA_ID}
        AND VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
        AND LOT_NO = #{LOT_NO}
    </select>

    <select id="interfaceLimsCOADetailData"  parameterType="coaMgmt"  resultType="coaMgmt">
        SELECT
        COA_ID
        , LOT_NO
        , SPEC_ID
        , SPEC_LSL
        , SPEC_USL
        , RESULT_VALUE
        , SYSDATE
        , 'N' AS UPDATE_YN
        , SPEC_LCL
        , SPEC_UCL
        FROM COA_DETAIL
        WHERE COA_ID = #{COA_ID}
        AND LOT_NO = #{LOT_NO}
    </select>



    <insert id="interfaceCOAMaster">
        /* coaMgmtMapper.interfaceCOAMaster */
        INSERT
        INTO ${DB_LINK_TARGET_MASTER} (
        COA_ID
        , FACTORY
        , VENDOR_CODE
        , MAT_ID
        , LOT_NO
        , STOCK_DATE
        , MF_DATE
        , COA_STATUS
        <if test="ETC != null and ETC != ''">
            , ETC
        </if>
        , REG_DATE
        , REG_USER
        , UPLOAD_RESULT
        , INTERFACE_DATE
        , UPDATE_YN
        , VENDOR_COMMENT
        , E_DATE
        , QUANTITY
        )
        VALUES (
        #{COA_ID}
        , #{FACTORY_ID}
        , #{VENDOR_ID}
        , #{MATERIAL_ID}
        , #{LOT_NO}
        , #{STOCK_DATE}
        , #{MF_DATE}
        , #{COA_STATUS}
        <if test="ETC != null and ETC != ''">
            , #{ETC}
        </if>
        , #{CREATE_DATETIME}
        , #{CREATOR}
        , #{UPLOAD_RESULT}
        , GETDATE()
        , #{UPDATE_YN}
        , #{VENDOR_COMMENT}
        , #{E_DATE}
        , #{QUANTITY}
        )
    </insert>

    <insert id="interfaceCOADetail">
        /* coaMgmtMapper.interfaceCOADetail */
        INSERT
        INTO ${DB_LINK_TARGET_DETAIL} (
        COA_ID
        , LOT_NO
        , INSP_ID
        , LSL
        , USL
        , VALUE
        , INTERFACE_DATE
        , UPDATE_YN
        , LCL
        , UCL
        )
        VALUES (
        #{COA_ID}
        , #{LOT_NO}
        , #{SPEC_ID}
        , #{SPEC_LSL}
        , #{SPEC_USL}
        , #{RESULT_VALUE}
        , getdate()
        , #{UPDATE_YN}
        , #{SPEC_LCL}
        , #{SPEC_UCL}
        )
    </insert>

    <select id="interfaceDqmsCOAMasterData" parameterType="coaMgmt"  resultType="coaMgmt">
        /* coaMgmtMapper.interfaceDqmsCOAMasterData */
        SELECT
        SEQ_DQMS_INTER_INFO_01.NEXTVAL AS SEQ
        , COA_ID
        , FACTORY_ID
        , VENDOR_ID
        , MATERIAL_ID
        , LOT_NO
        , STOCK_DATE
        , MF_DATE
        , 'B'              AS COA_STATUS
        , NVL(ETC, '')     AS ETC
        , CREATE_DATETIME
        , CREATOR
        , 'Y'              AS UPLOAD_RESULT
        , SYSDATE          AS INTERFACE_DATE
        , 'N'              AS UPDATE_YN
        , VENDOR_COMMENT
        FROM COA_MASTER
        WHERE COA_ID = #{COA_ID}
        AND VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
        AND LOT_NO = #{LOT_NO}
    </select>

    <select id="interfaceDqmsCOADetailData" parameterType="coaMgmt"  resultType="coaMgmt">
        /* coaMgmtMapper.interfaceDqmsCOADetailData */
        SELECT
        SEQ_DQMS_INTER_COA_01.NEXTVAL AS SEQ
        , COA_ID
        , LOT_NO
        , SPEC_ID
        , SPEC_LSL
        , SPEC_USL
        , RESULT_VALUE
        , SYSDATE AS INTERFACE_DATE
        , 'N' AS UPDATE_YN
        FROM COA_DETAIL
        WHERE COA_ID = #{COA_ID}
        AND LOT_NO = #{LOT_NO}
    </select>


    <update id="interfaceCOAProcedure" parameterType="String" >
        /* coaMgmtMapper.interfaceCOAProcedure */
        CALL ${DB_LINK_TARGET_APPLY}()
    </update>


    <insert id="interfaceDqmsCOAMaster">
        /* coaMgmtMapper.interfaceDqmsCOAMaster */
        INSERT
        INTO INTF_SQM_INFO (
        SEQ
        , COA_ID
        , FACTORY
        , VENDOR_CODE
        , MAT_ID
        , LOT_NO
        , STOCK_DATE
        , MF_DATE
        , COA_STATUS
        , ETC
        , REG_DATE
        , REG_USER
        , UPLOAD_RESULT
        , INTERFACE_DATE
        , VENDOR_COMMENT
        )
        VALUES (
        #{SEQ}
        , #{COA_ID}
        , #{FACTORY_ID}
        , #{VENDOR_ID}
        , #{MATERIAL_ID}
        , #{LOT_NO}
        , #{STOCK_DATE}
        , #{MF_DATE}
        , #{COA_STATUS}
        , #{ETC}
        , #{CREATE_DATETIME}
        , #{CREATOR}
        , #{UPLOAD_RESULT}
        , #{INTERFACE_DATE}
        , #{VENDOR_COMMENT}
        )
    </insert>

    <insert id="interfaceDqmsCOADetail">
        /* coaMgmtMapper.interfaceDqmsCOADetail */
        INSERT
        INTO INTF_SQM_COA (
        SEQ
        , COA_ID
        , LOT_NO
        , INSP_ID
        , LSL
        , USL
        , VALUE
        , INTERFACE_DATE
        )
        VALUES (
        #{SEQ}
        , #{COA_ID}
        , #{LOT_NO}
        , #{SPEC_ID}
        , #{SPEC_LSL}
        , #{SPEC_USL}
        , #{RESULT_VALUE}
        , #{INTERFACE_DATE}
        )
    </insert>

    <update id="interfaceDqmsCOAProcedure">
        /* coaMgmtMapper.interfaceDqmsCOAProcedure */
        CALL LIMS_INTF_SQM_PROC@LIMS_DEV_DB()
    </update>


    <select id="getEmailTargetUser" resultType="java.util.LinkedHashMap">

        SELECT EMAIL
        FROM SC_USER_INFO_DW
        WHERE
        MANAGE_PART_YN = 'Y'
        <foreach collection="factoryList" item="item" open="AND" separator="AND">
            ${item} = 'Y'
        </foreach>
    </select>


    <update id="updateCOAStatus">
        /* coaMgmtMapper.updateCOAStatus */
        UPDATE COA_MASTER
        SET COA_STATUS = #{COA_STATUS}
        WHERE COA_ID = #{COA_ID}
        AND VENDOR_ID = #{VENDOR_ID}
        AND MATERIAL_ID = #{MATERIAL_ID}
        AND FACTORY_ID = #{FACTORY_ID}
        AND LOT_NO = #{LOT_NO}
    </update>


    <select id="getMaterialListCoa"  parameterType="HashMap" resultType="hashMap">
        SELECT
            PART_CODE,
            PART_NAME,
            COM_CODE,
            PLANT_CODE,
            PART_STATUS
        FROM SC_PART_CODE
        WHERE
            1=1
        <if test="COM_CODE != null and COM_CODE != ''">
            AND COM_CODE =#{COM_CODE}
        </if>

    </select>




    <!--    <select id="getMaterialSimpleList" resultMap="simpleMaterialMap">-->
<!--        /* commonMapper.getMaterialList */-->
<!--        SELECT DISTINCT-->
<!--        MATERIAL_ID-->
<!--        , MATERIAL_NAME-->
<!--        FROM MATERIAL MT-->
<!--        WHERE 1=1-->
<!--        <if test="vendorId != null and vendorId != ''">-->
<!--            AND VENDOR_ID = #{vendorId}-->
<!--        </if>-->
<!--        ORDER-->
<!--        BY MATERIAL_ID ASC-->
<!--    </select>-->

<!--    <select id="getCpsVendorData" resultType="java.util.LinkedHashMap">-->
<!--        /* batchMapper.getCpsVendorData */-->
<!--        SELECT-->
<!--        FACTORY-->
<!--        , VENDOR_CODE-->
<!--        , VENDOR_NAME-->
<!--        , ADDR-->
<!--        FROM V_VENDOR_INFO-->
<!--    </select>-->


    <select id="getMaterialFactoryListCoa" resultType="java.util.LinkedHashMap">
        /* commonMapper.getMaterialFactoryList */
        SELECT
        FACTORY_ID
        , LANGUAGE_CODE_DATA AS FACTORY_NAME
        FROM MATERIAL
        LEFT OUTER JOIN(
            SELECT
            ID, LANGUAGE_CODE_DATA
            FROM
            PLANT
            LEFT OUTER JOIN
            SYS_MULTI_LANGUAGE
            ON
            PLANT.MULTI_LANG_ID = SYS_MULTI_LANGUAGE.LANGUAGE_CODE_ID
            AND SYS_MULTI_LANGUAGE.LANGUAGE = #{TOKEN_USER_LANG}
        ) LANGUAGE_INFO
        ON MATERIAL.FACTORY_ID = LANGUAGE_INFO.ID
        WHERE VENDOR_ID = #{vendorId}
        AND MATERIAL_ID = #{materialId}
        ORDER
        BY FACTORY_ID ASC
    </select>

    <insert id="insertCOADFile">
        /* coaMgmtMapper.insertCOADFile */
        INSERT
        INTO COA_FILE (
        COA_ID
        , SERVER_PATH
        , ORIGINAL_FILENAME
        )
        VALUES (
        #{coaId}
        , #{filePath}
        , #{fileName}
        )
    </insert>

    <select id="getSpecList" resultType="java.util.LinkedHashMap">
        /* coaMgmtMapper.getSpecList */
        SELECT
        FACTORY_ID
        , VENDOR_ID
        , MATERIAL_ID
        , SPEC_ID
        , SPEC_NAME
        , SPEC_ENG_NAME
        , SPEC_UNIT_NAME
        , NVL2(SPEC_LSL, DECODE(SUBSTR(SPEC_LSL, 1, 1), '.', '0'||SPEC_LSL, SPEC_LSL) , NULL) AS SPEC_LSL
        , NVL2(SPEC_USL, DECODE(SUBSTR(SPEC_USL, 1, 1), '.', '0'||SPEC_USL, SPEC_USL) , NULL) AS SPEC_USL
        , NVL2(SPEC_LCL, DECODE(SUBSTR(SPEC_LCL, 1, 1), '.', '0'||SPEC_LCL, SPEC_LCL) , NULL) AS SPEC_LCL
        , NVL2(SPEC_UCL, DECODE(SUBSTR(SPEC_UCL, 1, 1), '.', '0'||SPEC_UCL, SPEC_UCL) , NULL) AS SPEC_UCL
        , DECIMAL_PLACE
        , REQUIRED_YN
        FROM SPEC
        WHERE VENDOR_ID = #{vendorId}
        AND MATERIAL_ID = #{materialId}
        AND FACTORY_ID = #{plantId}
        ORDER BY
        ORDER_NO
    </select>

    <select id="parseDate" resultType="String">
        /* Common.parseDate */
        SELECT
        TO_CHAR(TO_DATE(#{param}), 'YYYY-MM-DD') AS DATE_STRING
        FROM DUAL
    </select>


</mapper>