<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CompanyInfo">

    <select id="GetBaseCode"  parameterType="String" resultType="baseCode">
        SELECT * FROM SC_base_code
        WHERE  GROUP_CODE != BASE_CODE
<!--        AND BASE_OPTION = 'SYSTEM'-->
        AND BASE_STATUS ='Y'
        AND GROUP_CODE  =#{GROUP_CODE}
        ORDER BY BASE_SORT ASC
    </select>

    <select id="findCompanyInfo"  parameterType="companyInfo" resultType="companyInfo">
        SELECT main.*
        ,DECODE(main.CP_WORK_CD1, 'CD1', 'O', ' ') AS CP_CODE_WORK_CD1
        ,DECODE(main.CP_WORK_CD2, 'CD2', 'O', ' ') AS CP_CODE_WORK_CD2
        ,DECODE(main.CP_WORK_CD3, 'CD3', 'O', ' ') AS CP_CODE_WORK_CD3
        ,DECODE(main.CP_WORK_CD4, 'CD4', 'O', ' ') AS CP_CODE_WORK_CD4
        ,DECODE(main.CP_WORK_CD5, 'CD5', 'O', ' ') AS CP_CODE_WORK_CD5
        From
        (
            SELECT
            c.COM_CODE
            ,c.COM_NAME
            ,NVL(TO_CHAR(c.COM_OK_DATE, 'YYYY-MM-DD'), ' ') AS COM_OK_DATE
            ,DECODE(c.TANTALUM_YN ,'Y','사용(인증)','미사용') TANTALUM_YN
            ,DECODE(c.TUNGSTEN_YN ,'Y','사용(인증)','미사용') TUNGSTEN_YN
            ,DECODE(c.TIN_YN ,'Y','사용(인증)','미사용') TIN_YN
            ,DECODE(c.GOLD_YN ,'Y','사용(인증)','미사용') GOLD_YN
            ,DECODE(c.COBALT_YN ,'Y','사용(인증)','미사용') COBALT_YN
            ,DECODE(c.MICA_YN ,'Y','사용(인증)','미사용') MICA_YN
            ,MAX(DECODE(x.BASE_CODE, 'CD1', 'CD1', ' ')) AS CP_WORK_CD1
            ,MAX(DECODE(x.BASE_CODE, 'CD2', 'CD2', ' ')) AS CP_WORK_CD2
            ,MAX(DECODE(x.BASE_CODE, 'CD3', 'CD3', ' ')) AS CP_WORK_CD3
            ,MAX(DECODE(x.BASE_CODE, 'CD4', 'CD4', ' ')) AS CP_WORK_CD4
            ,MAX(DECODE(x.BASE_CODE, 'CD5', 'CD5', ' ')) AS CP_WORK_CD5
            ,c.COM_NATION
            ,c.COM_STATUS
            ,c.REG_DW_USER_IDX
            ,c.UP_DW_USER_IDX
            ,c.REG_DATE
            ,c.UP_DATE
            ,c.VENDOR_WORK_KIND
            ,c.COM_USER_IDX
            ,c.COMPANY_NAME
            ,c.FACTORY_NAME
            ,NVL(c.BUS_NUMBER , '') BUS_NUMBER
            ,c.COM_ADDRESS
            ,c.COM_CEO_NAME
            ,c.COM_CEO_PHONE
            ,c.COM_CEO_EMAIL
            ,DECODE(c.COM_MANAGE_STATUS, '0' ,'Pending' , '1' , 'Waiting' , '2' ,'Approved' , '3' , 'Rejected') COM_MANAGE_STATUS
            ,c.COM_APP_DATE
            ,c.COM_FILE_NAME
            ,c.COM_FILE_PATH
            ,c.COM_AUDIT_POINT
            ,c.COM_AUDIT_LEVEL
            FROM
            SC_COMPANY_CODE c
            LEFT JOIN
            SC_COMPANY_CODE_WORK x ON c.COM_CODE = x.COM_CODE AND x.BASE_CODE IN ('CD1', 'CD2', 'CD3', 'CD4', 'CD5')
            WHERE 1=1
                AND NVL(c.COM_MANAGE_STATUS,'0') in ('1','2','3') -- (0:Pending, 1:Waiting, 2:Approved, 3:Rejected) Warranty
            <if test="COM_CODE != null and COM_CODE != ''">
                AND c.COM_CODE = #{COM_CODE}
            </if>
            <if test="COM_NAME != null and COM_NAME != ''">
                AND c.COM_NAME LIKE '%' || #{COM_NAME} || '%'
            </if>
            <if test="MINERAL != null and MINERAL != ''">
                AND  ${MINERAL} = 'Y'
            </if>
            <if test="COM_AUDIT_POINT_FROM >= 0 and COM_AUDIT_POINT_TO > 0">
                AND c.COM_AUDIT_POINT BETWEEN #{COM_AUDIT_POINT_FROM} AND #{COM_AUDIT_POINT_TO}
            </if>
            <if test="COM_MANAGE_STATUS != null and COM_MANAGE_STATUS != ''">
                AND c.COM_MANAGE_STATUS = #{COM_MANAGE_STATUS}
            </if>
                GROUP BY
            c.COM_CODE ,c.COM_NAME ,c.COM_OK_DATE
            ,c.TANTALUM_YN ,c.TUNGSTEN_YN ,c.TIN_YN ,c.GOLD_YN ,c.COBALT_YN ,c.MICA_YN
            ,c.COM_NATION ,c.COM_STATUS ,c.REG_DW_USER_IDX ,c.UP_DW_USER_IDX ,c.REG_DATE ,c.UP_DATE
            ,c.VENDOR_WORK_KIND ,c.COM_USER_IDX ,c.COMPANY_NAME ,c.FACTORY_NAME ,c.BUS_NUMBER
            ,c.COM_ADDRESS ,c.COM_CEO_NAME ,c.COM_CEO_PHONE ,c.COM_CEO_EMAIL
            ,c.COM_MANAGE_STATUS ,c.COM_APP_DATE ,c.COM_FILE_NAME ,c.COM_FILE_PATH
            ,c.COM_AUDIT_POINT ,c.COM_AUDIT_LEVEL
                ORDER BY
            c.COM_CODE
        ) main
        where 1=1
<!--            AND NVL(main.USER_STATUS,'0') in ('1','2','3') &#45;&#45; (0:대기, 1:검토중, 2:승인, 3:반려)-->
        <if test="DEPT_CODE != null and DEPT_CODE != ''">
            AND (  CP_WORK_CD1 =#{DEPT_CODE}
                OR CP_WORK_CD2 =#{DEPT_CODE}
                OR CP_WORK_CD3 =#{DEPT_CODE}
                OR CP_WORK_CD4 =#{DEPT_CODE}
                OR CP_WORK_CD5 =#{DEPT_CODE}
            )
        </if>

    </select>

    <!-- 업체승인 리스트-->
    <select id="findCpApprovalList"  parameterType="companyInfo" resultType="companyInfo">
        SELECT
            DECODE(NVL(main.USER_STATUS,0) ,'0' ,'대기', '1', '검토중', '2','승인' ,'3','반려') USER_STATUS
            ,(SELECT b.BASE_NAME FROM SC_BASE_CODE b WHERE BASE_CODE = main.CP_WORK_CD1) AS CP_CODE_WORK_CD1
            ,(SELECT b.BASE_NAME FROM SC_BASE_CODE b WHERE BASE_CODE = main.CP_WORK_CD2) AS CP_CODE_WORK_CD2
            ,(SELECT b.BASE_NAME FROM SC_BASE_CODE b WHERE BASE_CODE = main.CP_WORK_CD3) AS CP_CODE_WORK_CD3
            ,(SELECT b.BASE_NAME FROM SC_BASE_CODE b WHERE BASE_CODE = main.CP_WORK_CD4) AS CP_CODE_WORK_CD4
            ,(SELECT b.BASE_NAME FROM SC_BASE_CODE b WHERE BASE_CODE = main.CP_WORK_CD5) AS CP_CODE_WORK_CD5
            , main.*
        From
        (
        SELECT
         c.COM_CODE
        ,c.COM_NAME
        ,NVL(TO_CHAR(c.COM_OK_DATE, 'YYYY-MM-DD'), ' ') AS COM_OK_DATE
        ,DECODE(c.TANTALUM_YN ,'Y','사용(인증)','미사용') TANTALUM_YN
        ,DECODE(c.TUNGSTEN_YN ,'Y','사용(인증)','미사용') TUNGSTEN_YN
        ,DECODE(c.TIN_YN ,'Y','사용(인증)','미사용') TIN_YN
        ,DECODE(c.GOLD_YN ,'Y','사용(인증)','미사용') GOLD_YN
        ,DECODE(c.COBALT_YN ,'Y','사용(인증)','미사용') COBALT_YN
        ,DECODE(c.MICA_YN ,'Y','사용(인증)','미사용') MICA_YN
        ,MAX(DECODE(x.BASE_CODE, 'CD1', 'CD1', ' ')) AS CP_WORK_CD1
        ,MAX(DECODE(x.BASE_CODE, 'CD2', 'CD2', ' ')) AS CP_WORK_CD2
        ,MAX(DECODE(x.BASE_CODE, 'CD3', 'CD3', ' ')) AS CP_WORK_CD3
        ,MAX(DECODE(x.BASE_CODE, 'CD4', 'CD4', ' ')) AS CP_WORK_CD4
        ,MAX(DECODE(x.BASE_CODE, 'CD5', 'CD5', ' ')) AS CP_WORK_CD5
        ,c.COM_NATION
        ,c.COM_STATUS
        ,c.REG_DW_USER_IDX
        ,c.UP_DW_USER_IDX
        ,c.REG_DATE
        ,c.UP_DATE
        ,c.VENDOR_WORK_KIND
        ,c.COM_USER_IDX
        ,c.COMPANY_NAME
        ,c.FACTORY_NAME
        ,NVL(c.BUS_NUMBER , ' ') BUS_NUMBER
        ,c.COM_ADDRESS
        ,c.COM_CEO_NAME
        ,c.COM_CEO_PHONE
        ,c.COM_CEO_EMAIL
        ,DECODE(c.COM_MANAGE_STATUS, '0' ,'Pending' , '1' , 'Waiting' , '2' ,'Approved' , '3' , 'Rejected') COM_MANAGE_STATUS
        ,c.COM_APP_DATE
        ,c.COM_FILE_NAME
        ,c.COM_FILE_PATH
        ,c.COM_AUDIT_POINT
        ,c.COM_AUDIT_LEVEL
        ,uic.ID_PW_ADD_REASON
        ,uic.USER_STATUS
        ,uic.USER_OK_DATE
        ,uic.ID_ADD_TYPE
        ,uic.USER_IDX
        FROM
        SC_COMPANY_CODE c
        LEFT JOIN
        SC_USER_INFO_COMPANY uic ON c.COM_CODE = uic.Com_Code
        LEFT JOIN
        SC_COMPANY_CODE_WORK x ON c.COM_CODE = x.COM_CODE AND x.BASE_CODE IN ('CD1', 'CD2', 'CD3', 'CD4', 'CD5')
        WHERE 1=1
            AND NVL(c.COM_MANAGE_STATUS,0) in ('1','2','3') -- (0:Pending, 1:Waiting, 2:Approved, 3:Rejected)
        <if test="COM_CODE != null and COM_CODE != ''">
            AND c.COM_CODE = #{COM_CODE}
        </if>
        <if test="COM_NAME != null and COM_NAME != ''">
            AND c.COM_NAME LIKE '%' || #{COM_NAME} || '%'
        </if>
        <if test="ID_ADD_TYPE != null and ID_ADD_TYPE != ''">
            AND uic.ID_ADD_TYPE = #{ID_ADD_TYPE}
        </if>
        <if test="COM_MANAGE_STATUS != null and COM_MANAGE_STATUS != ''">
            AND c.COM_MANAGE_STATUS = #{COM_MANAGE_STATUS}
        </if>
        <if test="BUS_NUMBER != null and BUS_NUMBER != ''">
            AND c.BUS_NUMBER =${BUS_NUMBER}
        </if>
        GROUP BY
        c.COM_CODE ,c.COM_NAME ,c.COM_OK_DATE
        ,c.TANTALUM_YN ,c.TUNGSTEN_YN ,c.TIN_YN ,c.GOLD_YN ,c.COBALT_YN ,c.MICA_YN
        ,c.COM_NATION ,c.COM_STATUS ,c.REG_DW_USER_IDX ,c.UP_DW_USER_IDX ,c.REG_DATE ,c.UP_DATE
        ,c.VENDOR_WORK_KIND ,c.COM_USER_IDX ,c.COMPANY_NAME ,c.FACTORY_NAME ,c.BUS_NUMBER
        ,c.COM_ADDRESS ,c.COM_CEO_NAME ,c.COM_CEO_PHONE ,c.COM_CEO_EMAIL
        ,c.COM_MANAGE_STATUS ,c.COM_APP_DATE ,c.COM_FILE_NAME ,c.COM_FILE_PATH
        ,c.COM_AUDIT_POINT ,c.COM_AUDIT_LEVEL
        ,uic.ID_PW_ADD_REASON, uic.USER_STATUS,uic.USER_OK_DATE,uic.ID_ADD_TYPE,uic.USER_IDX
        ORDER BY
        c.COM_CODE
        ) main
        where 1=1
            AND NVL(main.USER_STATUS,0) in ('1','2','3') -- (0:대기, 1:검토중, 2:승인, 3:반려)
        <if test="DEPT_CODE != null and DEPT_CODE != ''">
            AND (  CP_WORK_CD1 =#{DEPT_CODE}
            OR CP_WORK_CD2 =#{DEPT_CODE}
            OR CP_WORK_CD3 =#{DEPT_CODE}
            OR CP_WORK_CD4 =#{DEPT_CODE}
            OR CP_WORK_CD5 =#{DEPT_CODE}
            )
        </if>
        <if test="USER_STATUS != null and USER_STATUS != ''">
            AND  NVL(main.USER_STATUS,0) =#{USER_STATUS}
        </if>

    </select>

    <select id="findCompanyCodeWork" parameterType="companyInfo" resultType="companyInfo">
        SELECT ccw.COM_CODE,ccw.BASE_CODE,BC.BASE_NAME
            FROM SC_COMPANY_CODE_WORK ccw ,SC_BASE_CODE bc
        WHERE ccw.BASE_CODE  = bc.BASE_CODE
            AND COM_CODE=#{COM_CODE}
    </select>

    <select id="findCompanyCodeWorkEx" parameterType="companyInfo" resultType="companyInfo">
        SELECT
        u.USER_IDX,
        u.USER_ID,
        u.USER_NAME,
        u.REG_DATE,
        uc.USER_OK_DATE,
        uc.user_status,
        uc.COM_USER_IDX,
        uc.RETURN_REASON,
        (SELECT LISTAGG(b.BASE_Name, '\n') WITHIN GROUP (ORDER BY b.BASE_Name)
        FROM SC_base_code b
        LEFT JOIN SC_USER_INFO_COMPANY_CONNECT_GOAL g ON b.BASE_CODE = g.BASE_CODE
        WHERE b.GROUP_CODE != b.BASE_CODE
<!--        AND b.BASE_OPTION = 'SYSTEM'-->
        AND b.BASE_STATUS = 'Y'
        AND b.GROUP_CODE = 'CONNECT'
        AND g.USER_IDX = u.USER_IDX) AS BASE_NAMES,
        (SELECT x.user_email
        FROM SC_USER_INFO_COMPANY_USER x
        WHERE x.User_idx = u.USER_IDX
        AND x.COM_USER_IDX = uc.COM_USER_IDX) AS user_email
        FROM
        SC_USER_INFO u
        JOIN
        SC_USER_INFO_COMPANY uc ON u.USER_IDX = uc.USER_IDX
        WHERE
            u.DEL_DATE IS null and uc.COM_CODE =#{COM_CODE}
        ORDER BY uc.USER_OK_DATE asc

    </select>

    <select id="findCompanyApprovalID" parameterType="companyInfo" resultType="companyInfo">
        SELECT
        u.USER_IDX,
        u.USER_ID,
        u.USER_NAME,
        u.REG_DATE,
        uc.USER_OK_DATE,
        DECODE(NVL(uc.USER_STATUS,0) ,'0' ,'대기', '1', '검토중', '2','승인' ,'3','반려') USER_STATUS ,
        uc.COM_USER_IDX ,
        uc.ID_ADD_TYPE ,
        uc.RETURN_REASON
        FROM
        SC_USER_INFO u
        JOIN
        SC_USER_INFO_COMPANY uc ON u.USER_IDX = uc.USER_IDX
        WHERE
        u.user_idx =#{USER_IDX}
    </select>

    <insert id="insertComCode" parameterType="companyInfo">
        insert into SC_COMPANY_CODE(COM_CODE, COM_NAME, COM_NATION, COM_STATUS, REG_DW_USER_IDX, UP_DW_USER_IDX, REG_DATE, UP_DATE,COM_MANAGE_STATUS)
        values (#{COM_CODE}, #{COM_NAME}, #{COM_NATION}, #{COM_STATUS}, 1, 1, sysdate, sysdate,1)
    </insert>

    <update id="updateComCode" parameterType="companyInfo">
        UPDATE SC_COMPANY_CODE
        SET
        <if test="COM_NATION != '' ">
            COM_NATION = #{COM_NATION},
        </if>
        <if test="COM_STATUS != '' ">
            COM_STATUS = #{COM_STATUS},
        </if>
        UP_DATE = sysdate,
        UP_DW_USER_IDX = #{UP_DW_USER_IDX}
        WHERE COM_CODE = #{COM_CODE}
    </update>

    <insert id="insertComCodeWork" parameterType="companyInfo">
        insert into SC_COMPANY_CODE_WORK(COM_CODE, BASE_CODE, REG_DW_USER_IDX, REG_DATE)
        values (#{COM_CODE},#{BASE_CODE}, #{REG_DW_USER_IDX}, sysdate)
    </insert>

    <delete id="deleteComCodeWork" parameterType="companyInfo">
        DELETE SC_COMPANY_CODE_WORK WHERE COM_CODE = #{COM_CODE}
    </delete>

    <select id="findById" parameterType="companyInfo" resultType="companyInfo">
        select * from SC_COMPANY_CODE where COM_CODE=#{COM_CODE}
    </select>

    <select id="findSearch" parameterType="companyInfo" resultType="companyInfo">
        select SCC.COM_CODE, COM_NAME, COM_NATION, COM_STATUS,
                LISTAGG(SCCW.BASE_CODE, ',') AS DEPT_CODES
        from SC_COMPANY_CODE SCC
        LEFT OUTER JOIN SC_COMPANY_CODE_WORK SCCW ON SCCW.COM_CODE = SCC.COM_CODE
        WHERE 1=1
        <if test="COM_CODE != '' ">
            AND SCC.COM_CODE = #{COM_CODE}
        </if>
        <if test="COM_NAME != '' ">
            AND COM_NAME = #{COM_NAME}
        </if>
        <if test="COM_NATION != '' ">
            AND COM_NAME = #{COM_NATION}
        </if>
        <if test="DEPT_CODES != '' ">
            AND #{DEPT_CODES} IN SCCW.BASE_CODE
        </if>
        GROUP BY
            SCC.COM_CODE,
            SCC.COM_NAME,
            SCC.COM_NATION,
            SCC.COM_STATUS
    </select>

    <delete id="delete" parameterType="int">
        delete from SC_COMPANY_CODE where COM_CODE=#{COM_CODE}
    </delete>

    <select id="findByCompanyId" parameterType="String" resultType="companyInfo">
        select * from SC_COMPANY_CODE where COM_CODE=#{COM_CODE}
    </select>

    <select id="findByCriteria" parameterType="map" resultType="companyInfo">
        SELECT RN, COM_CODE, COM_NAME, COM_NATION, COM_STATUS
        FROM
        (
            SELECT /*+ INDEX_DESC(SC_COMPANY_CODE PK_COMPANY_CODE) */
                ROWNUM RN, COM_CODE, COM_NAME, COM_NATION, COM_STATUS
            FROM SC_COMPANY_CODE
            WHERE 1 =1
            <if test="COM_CODE != null and COM_CODE != ''">
                AND (COM_CODE LIKE CONCAT(CONCAT('%',  #{COM_CODE}), '%'))
            </if>
            <if test="COM_NAME != null and COM_NAME != ''">
                AND (COM_NAME LIKE CONCAT(CONCAT('%',  #{COM_NAME}), '%'))
            </if>
            <if test="COM_NATION != null and COM_NATION != ''">
                AND (COM_NATION LIKE CONCAT(CONCAT('%',  #{COM_NATION}), '%'))
            </if>
            <if test="criteria != null and criteria != ''">
        <![CDATA[  AND ROWNUM <= (#{criteria.pageNum} * #{criteria.amount}) ]]>
            </if>
        )
        WHERE RN > ((#{criteria.pageNum}-1) * #{criteria.amount})
    </select>

    <select id="countByKeyword" parameterType="map" resultType="int">
        select count(*) CNT
        from SC_COMPANY_CODE
        WHERE 1 =1
        <if test="COM_CODE != null and COM_CODE != ''">
            AND (COM_CODE LIKE CONCAT(CONCAT('%',  #{COM_CODE}), '%'))
        </if>
        <if test="COM_NAME != null and COM_NAME != ''">
            AND (COM_NAME LIKE CONCAT(CONCAT('%',  #{COM_NAME}), '%'))
        </if>
        <if test="COM_NATION != null and COM_NATION != ''">
            AND (COM_NATION LIKE CONCAT(CONCAT('%',  #{COM_NATION}), '%'))
        </if>
    </select>

    <select id="getList" resultType="companyInfo">
        SELECT /*+ INDEX_DESC(SC_COMPANY_CODE PK_COMPANY_CODE) */
            ROWNUM RN, SCC.COM_CODE, COM_NAME, COM_NATION, COM_STATUS,
            (SELECT LISTAGG(SCCW.BASE_CODE, ',') WITHIN GROUP (ORDER BY SCCW.BASE_CODE) FROM SC_COMPANY_CODE_WORK SCCW WHERE SCCW.COM_CODE = SCC.COM_CODE) AS DEPT_CODES
        FROM SC_COMPANY_CODE SCC
    </select>

    <select id="getApiList" parameterType="map" resultType="hashMap">
        select COM_CODE, COM_NAME, COM_NATION, COM_STATUS from SC_COMPANY_CODE
        <!-- INNER JOIN COMPANY_CODE_WORK ccw ON ccd.COM_CODE = ccw.COM_CODE-->
        WHERE 1=1
        <if test="COM_CODE != '' ">
            and COM_CODE = #{COM_CODE}
        </if>
        <if test="COM_NAME != '' ">
            and COM_NAME = #{COM_NAME}
        </if>
    </select>

    <select id="getTotal" resultType="int">
        select count(*) CNT
        from SC_COMPANY_CODE
    </select>

    <update id="updateStatus" parameterType="companyInfo">
        update SC_COMPANY_CODE set COM_STATUS=#{COM_STATUS}
        where COM_CODE=#{COM_CODE}
    </update>
</mapper>